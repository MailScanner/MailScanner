#!/bin/sh
### BEGIN INIT INFO
# Provides:          MailScanner
# Required-Start:    $local_fs $network $syslog
# Required-Stop:     $local_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts the Mailscanner daemon
# Description:       starts MailScanner using start-stop-daemon
### END INIT INFO

# Author: Jerry Benton <mailscanner@mailborder.com>
# 30 JAN 2016

PATH=/usr/sbin:/usr/bin:/bin:/sbin
DESC="email processor - "
NAME=MailScanner
STARTAS=MailScanner
DAEMON=/usr/sbin/$NAME
QUICKPEEK=/usr/sbin/Quick.Peek
run_mailscanner=0
ramdisk_sync=0
run_nice=0
ms_conf=/etc/MailScanner/MailScanner.conf
ms_core=/usr/share/MailScanner
ramdisk_store=/var/spool/MailScanner/ramdisk_store
stopped_lockfile=/var/lock/subsys/MailScanner.off

# /etc/default/$PNAME filename
PNAME=MailScanner

RUNUSER=`${QUICKPEEK} RunAsUser ${ms_conf}`
RUNGROUP=`${QUICKPEEK} RunAsGroup ${ms_conf}`
PIDFILE=`${QUICKPEEK} PIDfile ${ms_conf}`

# daemon user:group to run as
if [ -n ${RUNUSER} ] && [ -n ${RUNGROUP} ]; then
	RUNAS="chuid ${RUNUSER}:${RUNGROUP}"
else
	RUNAS=
fi

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# if /var/lock/subsys is missing
[ -d /var/lock/subsys ] || mkdir -p /var/lock/subsys

# Read configuration variable file if it is present
[ -r /etc/default/$PNAME ] && . /etc/default/$PNAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# make this script show Starting / Stopping / etc ...
VERBOSE=yes

# Define LSB log_* functions.
. /lib/lsb/init-functions

# Don't start if MailScanner is not configured
if [ $run_mailscanner = 0 ]; then
	cat <<-EOF
	Edit the file /etc/MailScanner/MailScanner.conf according to
	your needs. When complete, edit /etc/default/MailScanner and set 
	the variable to enable MailScanner to run:

	run_mailscanner = 1
	EOF
    exit 0
fi

# work directory ownership and permissions
WORKPERM=`${QUICKPEEK} IncomingWorkPermissions ${ms_conf}`
work_dir=`${QUICKPEEK} IncomingWorkDir ${ms_conf}`
RDUSER=`${QUICKPEEK} IncomingWorkUser ${ms_conf}`
RDGROUP=`${QUICKPEEK} IncomingWorkGroup ${ms_conf}`

# check to make sure these are set
if [ -z ${work_dir} ]; then
	work_dir="/var/spool/MailScanner/incoming"
fi

# if the work user is empty
if [ -z ${RDUSER} ]; then
	# if the run user is also empty
	if [ -z ${RUNUSER} ]; then
		RDUSER="mail"
	else
		# use the Run As User for the Work User
		RDUSER=${RUNUSER}
	fi
fi

# if the work group is empty
if [ -z ${RDGROUP} ]; then
	# if the run group is also empty
	if [ -z ${RUNGROUP} ]; then
		RDGROUP="mtagroup"
	else
		# use the Run As Group for the Work Group
		RDGROUP=${RUNGROUP}
	fi
fi

# if work permissions are not set or incorrectly set
if [ `echo $WORKPERM | sed 's/^[-+0-9][0-9]*//' | wc -c` != 1 ]; then
	WORKPERM="0660"
fi

#
# Function that starts the daemon/service
#
do_start()
{	
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --startas $STARTAS --exec $DAEMON --pidfile $PIDFILE --test > /dev/null \
		|| return 1
	
	# if not running and there is a pid, remove it
	if [ -f ${PIDFILE} ]; then
		rm -f ${PIDFILE}
	fi
	
	start-stop-daemon --start --quiet --nicelevel $run_nice --pidfile $PIDFILE --exec $DAEMON --  \
		$RUNAS \
		|| return 2

  	# Set lockfile to inform cronjobs about the running daemon
	RETVAL="$?"
	if [ $RETVAL -eq 0 ]; then
	    touch /run/lock/subsys/MailScanner
	    rm -f $stopped_lockfile
	fi
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --signal 15 --quiet --retry=TERM/10/TERM/20 --pidfile $PIDFILE
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2

  	# Remove lockfile for cronjobs
	if [ $RETVAL -eq 0 ]; then
	    rm -f /run/lock/subsys/MailScanner
	    touch $stopped_lockfile
	fi
	
	# remove pid file
	rm -f $PIDFILE
	
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload()
{
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE
	return 0
}

do_perms()
{
	# make sure share and lib permissions are correct
	find ${ms_core} -type f -exec chmod 0644 {} \;
	
	# incoming
	chmod 0750 ${work_dir}
	chmod 0750 ${ramdisk_store}
	
	# processing.db and spamassassin.cache.db
	chmod 0660 ${work_dir}/*.db
}

case "$1" in
  start)
	if [ $ramdisk_sync = 1 ]; then
		# make sure this is a RAMDISK tmpfs
		FSTYPE=$(df -P -T ${work_dir}|tail -n +2 | awk '{print $2}');

		if [ ${FSTYPE} = tmpfs ]; then
			# if /var/spool/MailScanner/ramdisk_save is missing
			if [ ! -d ${ramdisk_store} ]; then
				mkdir -p ${ramdisk_store} 
				chmod 0755 ${ramdisk_store}
			fi
			
			# sync
			log_daemon_msg "Syncing ramdisk from persistent store"			
			rsync --quiet --archive ${ramdisk_store}/ ${work_dir}
		fi
	fi
			
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	
	do_start
	do_perms
	
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	
	do_stop
	
	if [ $ramdisk_sync = 1 ]; then
		# make sure this is a RAMDISK tmpfs
		FSTYPE=$(df -P -T ${work_dir}|tail -n +2 | awk '{print $2}');

		if [ ${FSTYPE} = tmpfs ]; then
			# if /var/spool/MailScanner/ramdisk_save is missing
			if [ ! -d ${ramdisk_store} ]; then
				mkdir -p ${ramdisk_store} 
				chmod 0750 ${ramdisk_store}
			fi
			
			# sync
			log_daemon_msg "Syncing ramdisk to persistent store"
			rm -rf ${ramdisk_store}/*
			rsync --quiet --archive --delete --recursive --force ${work_dir}/ ${ramdisk_store}
		fi
	fi
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc -p ${PIDFILE} ${DAEMON} ${NAME} && exit 0 || exit $?
	;;
  reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	log_daemon_msg "Reloading $DESC" "$NAME"
	do_reload
	log_end_msg $?
	;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|reload|restart|force-reload}" >&2
	exit 3
	;;
esac

: